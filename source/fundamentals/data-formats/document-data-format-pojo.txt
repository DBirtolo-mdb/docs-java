===========================
Document Data Format: POJOs
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This guide explains how you can store and retrieve MongoDB data using plain
old Java objects (`POJOs <https://en.wikipedia.org/wiki/Plain_old_Java_object>`__).
POJOs are classes that do not depend on any other files or frameworks, and are
often designed for storage and access of data.

.. _fundamentals-example-pojo:

Example POJO
------------

To follow the steps in this guide, you can create your own class or use the
following sample POJO class ``Flower`` which describes characteristics of a
flower:

.. code-block:: java

   public class Flower {

       private ObjectId id;
       private String name;
       private List<String> colors;
       private Boolean isBlooming;
       private Float height;

       // public empty constructor needed for retrieving the POJO
       public Flower() {}

       public Flower(String name, Boolean isBlooming, Float height, List<String> colors) {
           this.name = name;
           this.isBlooming = isBlooming;
           this.height = height;
           this.colors = colors;
       }

       public ObjectId getId() {
           return id;
       }

       public void setId(ObjectId id) {
           this.id = id;
       }

       public String getName() {
           return name;
       }

       public void setName(String name) {
           this.name = name;
       }

       public Boolean getIsBlooming() {
           return isBlooming;
       }

       public void setIsBlooming(Boolean isBlooming) {
           this.isBlooming = isBlooming;
       }

       public Float getHeight() {
           return height;
       }

       public void setHeight(Float height) {
           this.height = height;
       }

       public List<String> getColors() {
           return colors;
       }

       public void setColors(List<String> colors) {
           this.colors = colors;
       }

       @Override
       public String toString() {
           return "Flower [id=" + id + ", name=" + name + ", colors=" + colors + ", isBlooming=" + isBlooming + ", height=" + height + "]";
       }
   }

.. note:: POJO Serialization

   Make sure your POJO properties meet the following requirements for
   serialization:

   - **public** getter methods
   - **public** setter methods
   - **public** fields

   Also note that:

   - The codec omits static and transient fields in your POJO.
   - If your field has a corresponding getter method, the codec calls it for
     the value of the field. Otherwise, it retrieves the value directly from
     the field.
   - If your field has a corresponding setter method, the codec calls it to
     set the value of the field. Otherwise, it sets the value directly on the
     field.

Configure the Driver for POJOs
------------------------------

To set up the driver to store and retrieve POJOs, we need to specify:

- A codec provider that contains :doc:`Codecs </fundamentals/data-formats/codecs>`
  that define how to encode/decode the data between the POJO and MongoDB
  document, and which POJO classes or packages that the Codecs should apply to.
- A :java-docs:`CodecRegistry <apidocs/bson/org/bson/codecs/configuration/CodecRegistry.html>`
  instance that contains the aforementioned information.
- A ``MongoClient``, ``MongoDatabase``, or ``MongoCollection`` instance
  configured to use the ``CodecRegistry``.
- A ``MongoCollection`` instance configured to cast to your POJO document
  class.

Follow the steps below to see how to perform each of the requirements:


1. Configure the :java-docs:`PojoCodecProvider </apidocs/bson/org/bson/codecs/pojo/PojoCodecProvider.html>`,
   a codec provider that provides the Codecs that define how to encode the data
   and on which classes to apply the Codecs. In this example, we use the
   :java-doc:`automatic(true) </apidocs/bson/org/bson/codecs/pojo/PojoCodecProvider.Builder.html#automatic(boolean)>`
   setting of the :java-docs:`PojoCodecProvider.Builder <apidocs/bson/org/bson/codecs/pojo/PojoCodecProvider.Builder.html`
   to apply the Codecs to any class and its properties.

   .. code-block:: java

      CodecProvider pojoCodecProvider = PojoCodecProvider.builder().automatic(true).build();

.. note::

   Codec providers also contain other objects such as ``ClassModel`` and
   ``Convention`` instances that further define the serialization behavior.
   For more information on codec providers and customization, see our guide
   on :doc:`POJO Customization </fundamentals/data-formats/pojo-customization>`.


2. Add the ``PojoCodecProvider`` instance to a ``CodecRegistry``. The
   ``CodecRegistry`` allows you to specify one or more Codec providers to
   encode the POJO data. See the code below to see how to instantiate the
   ``CodecRegistry`` instance:

   .. code-block:: java

      // ensure you use the following static imports above your class definition
      import static com.mongodb.MongoClientSettings.getDefaultCodecRegistry;
      import static org.bson.codecs.configuration.CodecRegistries.fromProviders;
      import static org.bson.codecs.configuration.CodecRegistries.fromRegistries;

      // ...

      CodecRegistry pojoCodecRegistry = fromRegistries(getDefaultCodecRegistry(), fromProviders(pojoCodecProvider));


3. Configure our ``MongoClient``, ``MongoDatabase``, or ``MongoCollection``
   instance to use the Codecs in the ``CodecRegistry``. You only need to
   configure one of these. In this example, we set it on a ``MongoDatabase``
   called ``sample_pojos`` using the ``withCodecRegistry()`` method.

   .. code-block:: java

      try (MongoClient mongoClient = MongoClients.create(uri)) {
          MongoDatabase database = mongoClient.getDatabase("sample_pojos").withCodecRegistry(pojoCodecRegistry);
          // ...
      }



4. Configure your ``MongoCollection`` instance to cast to your POJO class when
   retrieving documents:

   .. code-block:: java

      MongoCollection<Flower> collection = database.getCollection("flowers", Flower.class);


Once you have configured the ``MongoCollection`` instance above, you can:

- save an instance of the POJO to the collection
- retrieve instances of the POJO from a query on the collection

The code below shows you how you can set data in an instance of a ``Flower``,
sve it in the collection, and retrieve the data in a ``List`` of ``Flower``
objects.

.. code-block:: java

   Flower flower = new Flower("rose", false, 25.4f, Arrays.asList(new String[] {"red", "green"}));

   // insert the instance
   collection.insertOne(flower);

   // return all documents in the collection
   List<Flower> flowers = new ArrayList<Flower>();

   MongoCursor<Flower> cursor = collection.find().iterator();
   try {
       while(cursor.hasNext()) {
           flowers.add(cursor.next());
       }
   } finally {
       cursor.close();
   }

   System.out.println(flowers);

When you run this code, your output should resemble the following:

.. code-block:: none

   [Flower [id=5f7f87659ed5b07cf3480a06, name=rose, colors=[green, red], isBlooming=false, height=25.4]]
