=========
Documents
=========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Overview
--------

A MongoDB **document** is a data structure that contains key/value pairs in
binary JSON (BSON) format. The document is the base unit of the MongoDB
data hierarchy: each document belongs to a single collection
and each collection belongs to a single database.

For more information on terminology, structure, and limitations of documents,
read our page on :manual:`Documents </core/document>` in the MongoDB manual.

The Java driver and BSON library include the following document classes that
help you access and manipulate the BSON data in documents:

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 10 10 20 20

   * - Name
     - Package
     - Implements Map
     - Recommended Usage

   * - ``Document``
     - ``org.bson``
     - Yes, implements ``Map<String, Object>``
     - When you want a flexible and concise data representation.

   * - ``BsonDocument``
     - ``org.bson``
     - Yes, implements ``Map<String, BsonValue>``
     - When you need a type-safe API.

   * - ``BasicDBObject``
     - ``com.mongodb``
     - No
     - When you are migrating your application from a legacy driver version.

While you can use any of the document classes in your application, we
recommend that you use the ``Document`` class since it can concisely
represent dynamically structured documents of any complexity. It
implements the ``Map<String, Object>`` interface which enables it to use
loosely-typed values.

Document
--------

The ``Document`` class offers a flexible representation of a BSON document.
You can access and manipulate fields using Java types with this class. See
the following table for mappings between frequently-used BSON and Java types:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - BSON type
     - Java type
   * - Array
     - ``java.util.List``
   * - Binary
     - ``org.bson.types.Binary``
   * - Boolean
     - ``java.lang.Boolean``
   * - Date
     - ``java.util.Date``
   * - Document
     - ``org.bson.Document``
   * - Double
     - ``java.lang.Double``
   * - Int32
     - ``java.lang.Integer``
   * - Int64
     - ``java.lang.Long``
   * - Null
     - ``null``
   * - ObjectId
     - ``org.bson.types.ObjectId``
   * - String
     - ``java.lang.String``

The mapping table above shows the default mapping when working with the
``Document`` class. You can customize the type mapping by specifying a
custom codec. For more information on customizing mapped types, see our guide
on using :doc:`Codecs </fundamentals/data-formats/codecs>`.

In the following code snippet, we show how to instantiate and build a sample
``Document`` instance that contains a variety of data types:

.. code-block:: java

   Document author = new Document("_id", new ObjectId())
       .append("name", "Gabriel García Márquez")
       .append("lastUpdated", new Date(120, 2, 26))
       .append("novels", Arrays.asList(
           new Document("title", "One Hundred Years of Solitude").append("yearPublished", 1967),
           new Document("title", "Chronicle of a Death Foretold").append("yearPublished", 1981),
           new Document("title", "Love in the Time of Cholera").append("yearPublished", 1985)));

To insert this document into a collection, instantiate a collection using
:java-docs:`getCollection()</apidocs/mongodb-driver-sync/com/mongodb/client/MongoDatabase.html#getCollection(java.lang.String)>`
and call the :doc:`insertOne </usage-examples/insertOne>` operation as
follows:

.. code-block:: java

  // MongoClient mongoClient = <code to instantiate your client>;

  MongoDatabase database = mongoClient.getDatabase("fundamentals_data");
  MongoCollection<Document> collection = database.getCollection("authors");

  InsertOneResult result = collection.insertOne(author);

Once you perform a successful insert, you can retrieve the sample document
data from the collection using the following code:

.. code-block:: java

   import com.mongodb.client.model.Filters;
   // <MongoCollection setup code here>

   Document doc = collection.find(Filters.eq("name", "Gabriel García Márquez")).first();
   if (doc != null) {
       System.out.println("_id: " + doc.getObjectId("_id")
           + ", name: " + doc.getString("name")
           + ", lastUpdated: " + doc.getDate("lastUpdated"));

       doc.getList("novels", Document.class).forEach((novel) -> {
           System.out.println("title: " + novel.getString("title")
               + ", yearPublished: " + novel.getInteger("yearPublished"));
           });
   }

The output should resemble the following:

.. code-block:: none
   :copyable: false

   _id: 5fb5fad05f734e3794741a35, name: Gabriel García Márquez, lastUpdated: Thu Mar 26 00:00:00 EDT 2020
   title: One Hundred Years of Solitude, yearPublished: 1967
   title: Chronicle of a Death Foretold, yearPublished: 1981
   title: Love in the Time of Cholera, yearPublished: 1985

For more information on retrieving and manipulating MongoDB data, see our
:doc:`CRUD guide </fundamentals/crud>`.

For more information on this class, see the
:java-docs:`Document API documentation </apidocs/bson/org/bson/Document.html>`.

BsonDocument
------------

The ``BsonDocument`` class provides a type-safe API to access and manipulate
a BSON document. You need to specify the BSON type from the Java BSON
library for each field. See the following table for mappings between
frequently-used BSON and Java BSON library types:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - BSON type
     - Java BSON library type
   * - Array
     - ``org.bson.BsonArray``
   * - Binary
     - ``org.bson.BsonBinary``
   * - Boolean
     - ``org.bson.Boolean``
   * - Date (long value)
     - ``org.bson.BsonDateTime``
   * - Document
     - ``org.bson.BsonDocument``
   * - Double
     - ``org.bson.BsonDouble``
   * - Int32
     - ``org.bson.BsonInt32``
   * - Int64
     - ``org.bson.BsonInt64``
   * - Null
     - ``null``
   * - ObjectId
     - ``org.bson.BsonObjectId``
   * - String
     - ``org.bson.BsonString``

The mapping table above shows the default mapping when working with the
``BsonDocument`` class. You can customize the type mapping by specifying a
custom codec. For more information on customizing mapped types, see our guide
on using :doc:`Codecs </fundamentals/data-formats/codecs>`.

In the following code snippet, we show how to instantiate and build a sample
``BsonDocument`` instance that contains a variety of data types:

.. code-block:: java

   BsonDocument author = new BsonDocument()
       .append("_id", new BsonObjectId())
       .append("name", new BsonString("Gabriel García Márquez"))
       .append("lastUpdated", new BsonDateTime(new Date(120, 2, 26).getTime()))
       .append("novels", new BsonArray(Arrays.asList(
           new BsonDocument().append("title", new BsonString("One Hundred Years of Solitude")).append("yearPublished", new BsonInt32(1967)),
           new BsonDocument().append("title", new BsonString("Chronicle of a Death Foretold")).append("yearPublished", new BsonInt32(1981)),
           new BsonDocument().append("title", new BsonString("Love in the Time of Cholera")).append("yearPublished", new BsonInt32(1985))
      )));

To insert this document into a collection, instantiate a collection using
:java-docs:`getCollection()</apidocs/mongodb-driver-sync/com/mongodb/client/MongoDatabase.html#getCollection(java.lang.String,java.lang.Class)>`,
specifying the ``BsonDocument`` class. Then, call the
:doc:`insertOne </usage-examples/insertOne>` operation as follows:

.. code-block:: java

   // MongoClient mongoClient = <code to instantiate your client>;

   MongoDatabase database = mongoClient.getDatabase("fundamentals_data");
   MongoCollection<BsonDocument> collection = database.getCollection("authors", BsonDocument.class);

   InsertOneResult result = collection.insertOne(author);

Once you perform a successful insert, you can retrieve the sample document
data from the collection using the following code:

.. code-block:: java

   import com.mongodb.client.model.Filters;

   // <MongoCollection setup code here>

   BsonDocument doc = collection.find(Filters.eq("name", "Gabriel García Márquez")).first();
   if (doc != null) {
       System.out.println("_id: " + doc.getObjectId("_id").getValue()
               + ", name: " + doc.getString("name").getValue()
               + ", lastUpdated: " + new Date(doc.getDateTime("lastUpdated").getValue()));

       doc.getArray("novels").forEach((novel) -> {
           System.out.println("title: " + novel.asDocument().getString("title").getValue()
                   + ", yearPublished: " + novel.asDocument().getInt32("yearPublished").getValue());
       });
   }

The output should resemble the following:

.. code-block:: none
   :copyable: false

   _id: 5fb5fad05f734e3794741a35, name: Gabriel García Márquez, lastUpdated: Thu Mar 26 00:00:00 EDT 2020
   title: One Hundred Years of Solitude, yearPublished: 1967
   title: Chronicle of a Death Foretold, yearPublished: 1981
   title: Love in the Time of Cholera, yearPublished: 1985

For more information on retrieving and manipulating MongoDB data, see our
:doc:`CRUD guide </fundamentals/crud>`.

For more information on this class, see the
:java-docs:`BsonDocument API documentation </apidocs/bson/org/bson/BsonDocument.html>`.

BasicDBObject
-------------

The ``BasicDBObject`` class allows you to access and manipulate document data
using Java types. We recommend that you avoid using this class unless you
are migrating an application from that uses an older driver version
because of the following limitations:

- This class implements the ``DBObject`` interface, so you cannot extend its
  API without breaking binary compatibility.
- ``BasicDBObject`` does not implement ``Map<String, Object>`` and therefore
  lacks the associated data access and manipulation convenience methods.

In the following code snippet, we show how to instantiate and build a sample
``BasicDBObject`` instance that contains a variety of data types:

.. code-block:: java

   BasicDBObject author = new BasicDBObject("_id", new ObjectId())
       .append("name", "Gabriel García Márquez")
       .append("lastUpdated", new Date(120, 2, 26))
       .append("novels", Arrays.asList(
           new BasicDBObject("title", "One Hundred Years of Solitude").append("yearPublished", 1967),
           new BasicDBObject("title", "Chronicle of a Death Foretold").append("yearPublished", 1981),
           new BasicDBObject("title", "Love in the Time of Cholera").append("yearPublished", 1985)));

To insert this document into a collection, instantiate a collection using
:java-docs:`getCollection()</apidocs/mongodb-driver-sync/com/mongodb/client/MongoDatabase.html#getCollection(java.lang.String,java.lang.Class)>`,
specifying the ``BasicDBObject`` class. Then, call the
:doc:`insertOne </usage-examples/insertOne>` operation as follows:

.. code-block:: java

   // MongoClient mongoClient = <code to instantiate your client>;

   MongoDatabase database = mongoClient.getDatabase("fundamentals_data");
   MongoCollection<BasicDBObject> collection = database.getCollection("authors", BasicDBObject.class);

   InsertOneResult result = collection.insertOne(author);

Once you perform a successful insert, you can retrieve the sample document
data from the collection using the following code:

.. code-block:: java

   import com.mongodb.client.model.Filters;
   // <MongoCollection setup code here>

   BasicDBObject doc = collection.find(Filters.eq("name", "Gabriel García Márquez")).first();
   if (doc != null) {
       System.out.println("_id: " + doc.getObjectId("_id")
           + ", name: " + doc.getString("name")
           + ", lastUpdated: " + doc.getDate("lastUpdated"));

       BasicDBList novels = (BasicDBList) doc.get("novels");
       if (novels != null) {
           BasicDBObject[] novelArr = novels.toArray(new BasicDBObject[0]);
           for (BasicDBObject novel : novelArr) {
               System.out.println("title: " + novel.getString("title")
               + ", yearPublished: " + novel.getInt("yearPublished"));
           }
       }
   }

The output should resemble the following:

.. code-block:: none
   :copyable: false

   _id: 5fb5fad05f734e3794741a35, name: Gabriel García Márquez, lastUpdated: Thu Mar 26 00:00:00 EDT 2020
   title: One Hundred Years of Solitude, yearPublished: 1967
   title: Chronicle of a Death Foretold, yearPublished: 1981
   title: Love in the Time of Cholera, yearPublished: 1985

For more information on retrieving and manipulating MongoDB data, see our
:doc:`CRUD guide </fundamentals/crud>`.

For more information on this class, see the
:java-docs:`BasicDBObject API documentation </apidocs/mongodb-driver-core/com/mongodb/BasicDBObject.html>`.

Summary
-------

In this guide, we covered the following topics on Java document classes:

- Described three Java classes you can use to work with MongoDB documents and
  why you might prefer one over the other.
- Provided usage examples for each class on building documents containing
  multiple types, inserting them into a collection, and
  retrieving/accessing their typed fields.

