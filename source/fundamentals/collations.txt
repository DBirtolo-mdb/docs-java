==========
Collations
==========

.. default-domain:: mongodb

Overview
--------

This guide shows you how to use **collations** with MongoDB to order your
query or aggregate results by string values. Collations are a set of
character ordering and matching rules that apply to specific languages and
locales.

You can read more about collations in the following sections:

- :ref:`Collations in MongoDB <collations-mongodb>`
- :ref:`How to Specify Collations <collations-specify>`
- :ref:`Collation Options <collations-options>`
- :ref:`Collation Code Examples <collations-examples>`

.. _collations-mongodb:

Collations in MongoDB
---------------------

MongoDB sorts strings using **binary collation** by default. This collation
method uses the :wikipedia:`ASCII standard <ASCII>` character values to
compare and order strings. Certain languages and locales have specific
character ordering conventions that differ from the ASCII character values.

For example, in Canadian French, the right-most accented character
(diacritic) determines the ordering for strings when all preceding characters
are the same. Consider the following Canadian French words:

- cote
- coté
- côte
- côté

When using binary collation, MongoDB sorts them in the following order:

.. code-block:: none
   :copyable: false

   cote
   coté
   côte
   côté

When using the Canadian French collation, MongoDB sorts them in a different
order as shown below:

.. code-block:: none
   :copyable: false

   cote
   côte
   coté
   côté

For a complete list of collations that MongoDB supports, see our server
manual page on
:manual:`Collation Languages and Locales </reference/collation-locales-defaults/#collation-languages-locales>`.

.. _collations-specify:

How to Specify Collations
-------------------------

MongoDB supports collations on most :doc:`CRUD operations </fundamentals/crud>`
and aggregations. For a complete list of supported operations, see the
:manual:`Operations that Support Collations </reference/collation/#operations-that-support-collation>`
server manual page. See the following sections to learn how to specify
collations:

- collection
- index
- operation

.. _collations-collection:

Collection
~~~~~~~~~~

You can set a default collation when you create a collection. When you
create a collection with a specified collation, all supported operations
that scan that collection apply the rules of the collation.

The following snippet shows how to specify the "en_US" locale collation
when creating a new collection called "items":

.. literalinclude:: /includes/fundamentals/code-snippets/CollationCollectionExample.java
   :language: java
   :dedent:
   :start-after: start createCollectionOptions
   :end-before: end createCollectionOptions

To check whether you created the collation successfully, retrieve a list
of the indexes on that collection as follows:

.. literalinclude:: /includes/fundamentals/code-snippets/CollationCollectionExample.java
   :language: java
   :dedent:
   :start-after: start listIndexes
   :end-before: end listIndexes

The output of your code should contain the following:

.. code-block:: none
   :copyable: false

   { ...
     "collation": { "locale": "en_US", ... }
     ...
   }

.. note::

   You can only assign a default collation to a collection when you create
   that collection. To use collations for supported operations on an
   existing collection, create an index with the collation and specify the
   same collation in your operations on it.

.. _collations-index:

Index
~~~~~

You can specify a collation when you create a new index on a collection. In
order for your operations to use the collation, your operation must meet the
following criteria:

- you must pass the same collation that is specified in the index
- the operation is covered by the index containing the collation

The following code snippet shows how you can create an ascending index on the
"name" field with the "en_US" locale collation.

.. literalinclude:: /includes/fundamentals/code-snippets/CollationCollectionExample.java
   :language: java
   :dedent:
   :start-after: start createIndex
   :end-before: end createIndex


To check whether you created the collation successfully, retrieve a list
of the indexes on that collection as follows:

.. literalinclude:: /includes/fundamentals/code-snippets/CollationCollectionExample.java
   :language: java
   :dedent:
   :start-after: start listIndexes
   :end-before: end listIndexes

The output of of the code above should contain the following:

.. code-block:: none
   :copyable: false

   { ...
     "collation": { "locale": "en_US", ... }
     ...
   }

The following code snippet shows an example operation that specifies the
same collation and is covered by the index we created above:

.. literalinclude:: /includes/fundamentals/code-snippets/CollationCollectionExample.java
   :language: java
   :dedent:
   :start-after: start indexOperation
   :end-before: end indexOperation

Operation
~~~~~~~~~

You can override the default collation on a collection by passing the
new collation as a parameter to one of the supported operations. However,
since the operation does not use an index, the operation may not perform
as well as one that is covered by an index. For more information on the
disadvantages of sorting operations not covered by an index, see the server
manual page on :manual:`Use Indexes to Sort Query Results </tutorial/sort-results-with-indexes/>`.

The following code snippet shows an example query operation that specifies
the Icelandic ("is") collation that is not covered by the default collation
we created in the :ref:`collections section <collations-collections>`:

.. literalinclude:: /includes/fundamentals/code-snippets/CollationCollectionExample.java
   :language: java
   :dedent:
   :start-after: start customCollationOperation
   :end-before: end customCollationOperation

Index Types That Do Not Support Collations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

While most MongoDB index types support collation, the following types support
only binary comparison:

- :manual:`text </reference/method/db.collection.createIndex/#options-for-text-indexes>`
- :manual:`2d </reference/method/db.collection.createIndex/#options-for-2dsphere-indexes>`
- :manual:`geoHaystack </reference/method/db.collection.createIndex/#options-for-geohaystack-indexes>`


.. _collations-options:

Collation Options
-----------------

This section covers various collation options and how to specify them to
further refine the ordering and matching behavior.

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Collation Option
     - Builder Method
     - Description

   * - Backwards
     - ``backwards()``
     - Whether to consider diacritics from the end of the string first.

   * - Case-sensitivity
     - ``caseLevel()``
     - Whether to consider case (upper or lower) as different values.

   * - Alternate
     - ``collationAlternate()``
     - Whether to consider spaces and punctuation.

   * - Case first
     - ``collationCaseFirst()``
     - Whether to consider uppercase or lowercase first.

   * - Max Variable
     - ``collationMaxVariable()``
     - Whether to ignore whitespace or both whitespace and punctuation.
       This setting is only valid when the alternate setting is "shifted".

   * - Strength
     - ``collationStrength()``
     - ICU level of comparison. The default value is "tertiary". For more
       information on each level, see the `ICU Comparison Levels <http://userguide.icu-project.org/collation/concepts#TOC-Comparison-Levels>`__.

   * - Locale
     - ``locale()``
     - **Required**. The ICU locale code for language and variant.

   * - Normalization
     - ``normalization()``
     - Whether to perform unicode normalization on the text as needed. For more
       information on unicode normalization, see `Unicode Normalization
       Forms <https://unicode.org/reports/tr15/>`__.

   * - Numeric Ordering
     - ``numericOrdering()``
     - Whether to order numbers according to numeric value rather than
       collation order.

You can use the ``Collation.Builder`` class to specify values for the
collation options above. You can call the ``build()`` method construct a
``Collation`` object as shown in the following code snippet:

.. literalinclude:: /includes/fundamentals/code-snippets/CollationCollectionExample.java
   :language: java
   :dedent:
   :start-after: start collationBuilder
   :end-before: end collationBuilder

For more information on the corresponding methods and parameters they
take, see the API documentation for :java-docs:`Collation.Builder
<apidocs/mongodb-driver-core/com/mongodb/client/model/Collation.Builder.html>`.

For a complete list of supported locales, see our server manual page on
:manual:`Supported Languages and Locales </reference/collation-locales-defaults/#supported-languages-and-locales>`.

.. _collation-examples:

Collation Examples
------------------

Collation Query Examples
~~~~~~~~~~~~~~~~~~~~~~~~

Operations that read, update, and delete documents from a collection can use
collations. This section includes examples of a selection of these. See the
MongoDB manual for a full list of :manual:`operations that support collation
</reference/collation/#operations-that-support-collation>`.

find() and sort() Example
`````````````````````````

The following example calls ``find()`` and ``sort()`` on a collection
that uses a collation for the "de" locale.

TODO

findOneAndUpdate() Example
``````````````````````````

The following example calls the ``findOneAndUpdate()`` operation on a
collection that uses the default binary collation. The collection contains the
following documents:

.. code-block:: none

  { "_id" : 1, "first_name" : "Hans" }
  { "_id" : 2, "first_name" : "Gunter" }
  { "_id" : 3, "first_name" : "Günter" }
  { "_id" : 4, "first_name" : "Jürgen" }

Consider the following ``findOneAndUpdate()`` operation on this collection
which **does not** specify a collation:

TODO

Since "Gunter" is the first sorted result when using a binary collation, none
of the documents come lexically before and match the ``$lt`` comparison
operator in the query document. As a result, the operation does not update any
documents.

Consider the same operation with a collation specified with the locale set to
``de@collation=phonebook``. This locale specifies the ``collation=phonebook``
option which contains rules for prioritizing proper nouns, identified by
capitalization of the first letter. The ``de@collation=phonebook`` locale and
option sorts characters with umlauts before the same characters without
umlauts.

TODO

Since "Günter" lexically comes before "Gunter" using the
``de@collation=phonebook`` collation specified in ``findOneAndUpdate()``,
the operation returns the following updated document:

.. code-block:: none

  { lastErrorObject: { updatedExisting: true, n: 1 },
    value: { _id: 3, first_name: 'Günter' },
    ok: 1 }

findOneAndDelete() Example
``````````````````````````

The following example calls the ``findOneAndDelete()`` operation on a
collection that uses the default binary collation and contains the following
documents:

.. code-block:: none

  { "_id" : 1, "a" : "16" }
  { "_id" : 2, "a" : "84" }
  { "_id" : 3, "a" : "179" }

In this example, we set the ``numericOrdering`` collation parameter to ``true``
to sort numeric strings based on their numerical order instead of their
lexical order.

TODO

After you run the operation above, the collection contains the following
documents:

.. code-block:: none

  { "_id" : 1, "a" : "16" }
  { "_id" : 2, "a" : "84" }

If you perform the same operation without collation on the original
collection of three documents, it matches documents based on the lexical value
of the strings ("``16``", "``84``", and "``179``"), and deletes the first
document it finds that matches the query criteria.

TODO

Since all the documents contain lexical values in the ``a`` field that
match the criteria (greater than the lexical value of "``100``"), the operation
removes the first result. After you run the operation above, the collection
contains the following documents:

.. code-block:: none

   { "_id" : 2, "a" : "84" }
   { "_id" : 3, "a" : "179" }

Aggregation Example
```````````````````

To use collation with the aggregate
operation, pass the collation document in the options field, after the
array of pipeline stages.

The following example shows an aggregation pipeline on a collection that uses
the default binary collation. The aggregation groups the ``first_name`` field,
counts the total number of results in each group, and sorts the results by
the German phonebook (``de@collation=phonebook`` locale) order.

.. note::

   You can specify only one collation on an aggregation.

TODO
