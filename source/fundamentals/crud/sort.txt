============
Sort Results
============

.. default-domain:: mongodb

Use ``sort`` to change the order in which read operations return
documents. ``Sort`` tells MongoDB to order returned documents by the
values of one or more fields in a certain direction. To sort returned
documents by a field in ascending (lowest first) order, use the ``Sorts.ascending``
function. To sort in descending (greatest first) order instead, use ``Sorts.descending``.
If you do not specify a sort, MongoDB does not guarantee the order of
query results.

Follow the instructions in the examples below to insert data into
a collection and perform a sort on the results of a query.
Consider a collection containing documents that describe books. To
insert this data into a collection, run the following operation:

.. code-block:: java

   collection.insertMany([
        new Document().append("_id", 1)
            .append("title", "The Brothers Karamazov").append("length", 824).append("author", "Dostoyevksy"),
        new Document().append("_id", 2)
            .append("title", "Les Misérables").append("length", 1462).append("author", "Hugo"),
        new Document().append("_id", 3)
            .append("title", "Atlas Shrugged).append("length", 1088).append("author", "Rand"),
        new Document().append("_id", 4)
            .append("title", "Infinite Jest").append("length", 1104).append("author", "Wallace"),
        new Document().append("_id", 5)
            .append("title", "Cryptonomicon").append("length", 918).append("author", "Stephenson"),
        new Document().append("_id", 6)
            .append("title", "A Dance with Dragons").append("length", 1104).append("author", "Martin"),
   ]);

Call the sort function and specify the order with ``ascends`` to ensure that the
operation returns books in alphabetical order:

.. code-block:: java
   :emphasize-lines: 4

    // define a cursor that can iterate through the results of the query
    MongoCursor<Document> cursor = collection.find()
        .sort(ascending("title")).iterator();
   
    // print out items in alphabetical order
    try {
      while (cursor.hasNext()) {
        System.out.println(cursor.next().toJson());
      }
    // close the cursor
    } finally {
      cursor.close();
    }

The sort order can be specified by either "ascending" or "descending", based
on the field name to sort by. ``find()`` returns the following
documents when sort is used with a query on "title" and an ascending order:

.. code-block:: javascript

   { "_id": 6, "title": "A Dance with Dragons", "author": "Martin", "length": 1104 }
   { "_id": 3, "title": "Atlas Shrugged", "author": "Rand", "length": 1088 }
   { "_id": 5, "title": "Cryptonomicon", "author": "Stephenson", "length": 918 }
   { "_id": 4, "title": "Infinite Jest", "author": "Wallace", "length": 1104 }
   { "_id": 2, "title": "Les Misérables", "author": "Hugo", "length": 1462 }
   { "_id": 1, "title": "The Brothers Karamazov", "author": "Dostoyevsky", "length": 824 }

Sometimes, the order of two or more documents is ambiguous using a
specified sort. Consider the case of sorting by length: In the above case, 
both "A Dance with Dragons" and "Infinite Jest" have ``1104`` pages, so 
the order in which they are returned is not guaranteed. To resolve ties in 
your sorted results in a repeatable way, add additional parameters to the 
``Sorts.ascending`` function call:

.. code-block:: java
   :emphasize-lines: 4

    // sort first by length, then title
    MongoCursor<Document> cursor = collection.find()
        .sort(ascending("length", "title")).iterator();
   
    // print out items
    try {
      while (cursor.hasNext()) {
        System.out.println(cursor.next().toJson());
      }
    // close the cursor
    } finally {
      cursor.close();
    }

With the addition of the ``title`` field to the sort document, the read
operation sorts matching documents first by ``length`` and, in the event
of a tie, then by ``title``. Matched document fields are compared in
the same order as fields are specified in the sort document. ``find()``
returns the following ordering of documents when this sort is used on
the documents matching the query, sorting "A Dance with Dragons" before 
"Infinite Jest" for the two books with the same length:

.. code-block:: javascript

   { "_id": 1, "title": "The Brothers Karamazov", "author": "Dostoyevsky", "length": 824 }
   { "_id": 5, "title": "Cryptonomicon", "author": "Stephenson", "length": 918 }
   { "_id": 3, "title": "Atlas Shrugged", "author": "Rand", "length": 1088 }
   { "_id": 6, "title": "A Dance with Dragons", "author": "Martin", "length": 1104 }
   { "_id": 4, "title": "Infinite Jest", "author": "Wallace", "length": 1104 }
   { "_id": 2, "title": "Les Misérables", "author": "Hugo", "length": 1462 }