====================================
Limit the Number of Returned Results
====================================

.. default-domain:: mongodb

Use ``limit`` to cap the number of documents that can be returned from a
read operation. The ``limit`` operation functions as a cap on the maximum number of
documents that the operation can return, but it can return
a smaller number of documents if there are not enough present
to reach the limit. If ``limit`` is used with the
``skip`` (TODO: link) method, the skip applies
first and the limit only applies to the documents left over after
the skip.

Follow the instructions in the examples below to insert data into
a collection and return only certain results from a query using a sort,
a skip, and a limit. Perform the following operation to insert these documents
representing books into a collection:

.. code-block:: java

    collection.insertMany(Arrays.asList(
        new Document().append("_id", 1)
            .append("title", "The Brothers Karamazov").append("length", 824)
            .append("author", "Dostoyevksy"),
        new Document().append("_id", 2)
            .append("title", "Les Misérables").append("length", 1462).append("author", "Hugo"),
        new Document().append("_id", 3)
            .append("title", "Atlas Shrugged").append("length", 1088).append("author", "Rand"),
        new Document().append("_id", 4)
            .append("title", "Infinite Jest").append("length", 1104).append("author", "Wallace"),
        new Document().append("_id", 5)
            .append("title", "Cryptonomicon").append("length", 918).append("author", "Stephenson"),
        new Document().append("_id", 6)
            .append("title", "A Dance with Dragons").append("length", 1104)
            .append("author", "Martin")
    ));

The following example queries the collection to return the top three
longest books. It matches all the documents with the query, applies
a ``sort`` on the ``length`` field to return books with longer lengths before
books with shorter lengths, and applies a ``limit`` to return only ``3`` results:

.. code-block:: java
  :emphasize-lines: 5

    import com.mongodb.client.model.Sorts;

    // define a cursor that will return the first 3 sorted items
    MongoCursor<Document> cursor = collection.find()
        .sort(descending("length"))
        .limit(3)
        .iterator();
    // print out items
    try {
      while (cursor.hasNext()) {
        System.out.println(cursor.next());
      }
    // close the cursor
    } finally {
      cursor.close();
    }


The code example above prints out the following three documents, sorted by
length:

.. code-block:: java

   Document{{_id=2, title=Les Misérables, author=Hugo, length=1462}}
   Document{{_id=6, title=A Dance with Dragons, author=Martin, length=1104}}
   Document{{_id=4, title=Infinite Jest, author=Wallace, length=1104}}

.. note::

   The order in which you call ``limit`` and ``sort`` does not matter
   because the driver reorders the calls to apply the sort first and the
   limit after it. The following two calls are equivalent:

   .. code-block:: java

      collection.find().sort(descending("length")).limit(3);
      collection.find().limit(3).sort(descending("length"));


To see the next three longest books, append the ``skip()`` method, passing
the number of documents to skip over to the previous code snippet's call to
``find()``:

.. code-block:: java

  :emphasize-lines: 5

    import com.mongodb.client.model.Sorts;

    MongoCursor<Document> cursor = collection.find()
      .sort(ascending("length"))
      .limit(3)
      .skip(3)
      .iterator();
    try {
      while(cursor.hasNext()) {
        System.out.println(cursor.next());
      }
    } 
    finally {
      cursor.close();
    }

This operation returns the documents that describe the fourth through sixth
longest books:

.. code-block:: javascript

   Document{{_id=3, title=Atlas Shrugged, author=Rand, length=1088}}
   Document{{_id=5, title=Cryptonomicon, author=Stephenson, length=918}}
   Document{{_id=1, title=The Brothers Karamazov, author=Dostoyevsky, length=824}}

You can combine ``skip`` and ``limit`` in this way to implement paging for your
collection, returning only small "slices" of the collection at once.
