====================================
Enterprise Authentication Mechanisms
====================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

In this guide, we show you how to authenticate with MongoDB using each
**authentication mechanism** available exclusively in the MongoDB Enterprise
Edition. Authentication mechanisms are processes by which the driver and
server confirm identity and establish trust to ensure security.

The mechanisms that you can use with the latest version of the MongoDB
Enterprise Edition are as follows:

- :ref:`Kerberos (GSSAPI/SSPI) <gssapi-auth-mechanism>`
- :ref:`LDAP (PLAIN) <plain-auth-mechanism>`

To authenticate using another mechanism, see the
:doc:`Authentication Mechanisms guide </fundamentals/auth>`. For more
information on establishing a connection to your MongoDB cluster, read our
:doc:`Connection Guide </fundamentals/connection>`.


Specify an Authentication Mechanism
-----------------------------------

.. include:: /includes/fundamentals/auth-specify.rst

Mechanisms
----------

.. _gssapi-auth-mechanism:

Kerberos (GSSAPI/SSPI)
~~~~~~~~~~~~~~~~~~~~~~

*Available in MongoDB Enterprise Edition 3.7 and later.*

The Generic Security Services API (``GSSAPI``) authentication mechanism
allows the user to authenticate to a Kerberos service using the user's
principal name.

.. note::
   The method refers to the ``GSSAPI`` authentication mechanism instead
   of ``Kerberos`` because the driver authenticates using the
   `GSSAPI RFC-4652 <https://tools.ietf.org/html/rfc4752>`_  SASL
   mechanism.

The following code snippets show how to specify the authentication mechanism,
using the following placeholders:

* ``username`` - your URL-encoded principal name, e.g. "username%40REALM.ME"
* ``hostname`` - network address of your MongoDB server, accessible by your client
* ``port`` - port number of your MongoDB server

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the GSSAPI authentication mechanism using a connection
      string, assign the ``authMechanism`` parameter to the value
      ``GSSAPI`` in your connection string. Set the ``authSource`` parameter
      to the value ``$external``. Your code to instantiate a ``MongoClient`` 
      should resemble the following:

      .. code-block:: java

         MongoClient mongoClient = MongoClients.create("<username>@<hostname>:<port>/?authSource=<authenticationDb>&authMechanism=GSSAPI");

   .. tab::
      :tabid: MongoCredential

      To specify the GSSAPI authentication mechanism using the
      ``MongoCredential`` class, use the ``createGSSAPICredential()``
      method. Your code to instantiate a ``MongoClient`` should resemble the
      following:

      .. include:: /includes/fundamentals/code-snippets/auth-credentials-gssapi.rst


In order to acquire a Kerberos ticket, the GSSAPI Java libraries may require
that you specify the realm and Key Distribution Center (KDC) properties. See
the sample settings in the example below:

.. code-block:: properties

   java.security.krb5.realm=MYREALM.ME
   java.security.krb5.kdc=mykdc.myrealm.me

You may need to specify one or more of the following additional properties
depending on your Kerberos setup:

- ``SERVICE_NAME``
- ``CANONICALIZE_HOST_NAME``
- ``JAVA_SUBJECT``
- ``JAVA_SASL_CLIENT_PROPERTIES``

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions on how to specify these properties:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify one of the GSSAPI additional properties, include it in the
      connection string as a parameter using the format:
      ``<PROPERTY_NAME>:<value>``.

      Your code to instantiate a ``MongoClient`` using GSSAPI and additional
      properties might resemble the following:

      .. code-block:: java

         MongoClient mongoClient = MongoClients.create("<username>@<hostname>:<port>/?authSource=<authenticationDb>&authMechanism=GSSAPI&SERVICE_NAME:myService");

   .. tab::
      :tabid: MongoCredential

      To specify one of the GSSAPI additional properties, call the
      ``withMechanismProperty()`` method on your ``MongoCredential``
      instance and pass the property name and value as parameters. Use the
      property name constants defined in the ``MongoCredential`` class:

      - :java-docs:`SERVICE_NAME_KEY </apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#SERVICE_NAME_KEY>`
      - :java-docs:`CANONICALIZE_HOST_NAME_KEY </apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#CANONICALIZE_HOST_NAME_KEY>`
      - :java-docs:`JAVA_SUBJECT_KEY </apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#JAVA_SUBJECT_KEY>`
      - :java-docs:`JAVA_SASL_CLIENT_PROPERTIES_KEY </apidocs/mongodb-driver-core/com/mongodb/MongoCredential.html#JAVA_SASL_CLIENT_PROPERTIES_KEY>`

      Your code to instantiate a ``MongoClient`` using GSSAPI and additional
      properties might resemble the following:

      .. include:: /includes/fundamentals/code-snippets/auth-credentials-gssapi-properties.rst

.. note::

   On Windows, Oracleâ€™s JRE uses `LSA <https://msdn.microsoft.com/en-us/library/windows/desktop/aa378326.aspx>`__
   rather than `SSPI <https://msdn.microsoft.com/en-us/library/windows/desktop/aa380493.aspx>`__
   in its implementation of GSSAPI which limits interoperability with
   Windows Active Directory and implementation of single sign-on. See the
   following articles for more information:

   - `JDK-8054026 <https://bugs.openjdk.java.net/browse/JDK-8054026>`__
   - `JDK-6722928 <https://bugs.openjdk.java.net/browse/JDK-6722928>`__
   - `SO 23427343 <https://stackoverflow.com/questions/23427343/cannot-retrieve-tgt-despite-allowtgtsessionkey-registry-entry>`__


.. _plain-auth-mechanism:

LDAP (PLAIN)
~~~~~~~~~~~~

*Available in MongoDB Enterprise Edition 3.4 and later.*

You can authenticate to a Lightweight Directory Access Protocol (LDAP)
server using your directory server username and password (if required).

.. note::
   The authentication mechanism is named ``PLAIN`` instead of ``LDAP`` since it
   authenticates using the `PLAIN Simple Authentication and Security Layer
   (SASL) defined in RFC-4616 <https://tools.ietf.org/html/rfc4616>`_.

You can specify this authentication mechanism by setting the ``authMechanism``
parameter to ``PLAIN`` and including your LDAP username and password in the
:manual:`connection string </reference/connection-string/>` as shown
in the following sample code.

The following code snippets show how to specify the authentication mechanism,
using the following placeholders:

* ``username`` - your LDAP username
* ``password`` - your LDAP user's password (if required)
* ``hostname`` - network address of your MongoDB server, accessible by your client
* ``port`` - port number of your MongoDB server

Select the :guilabel:`Connection String` or the :guilabel:`MongoCredential`
tab below for instructions and sample code for specifying this authentication
mechanism:

.. tabs::

   .. tab::
      :tabid: Connection String

      To specify the LDAP (PLAIN) authentication mechanism using a connection
      string, assign the ``authMechanism`` parameter to the value
      ``PLAIN`` in your connection string. Set the ``authSource`` parameter
      to the value ``$external``. Your code to instantiate a ``MongoClient``
      should resemble the following:

      .. code-block:: java

         MongoClient mongoClient = MongoClients.create("<username>:<password>@<hostname>:<port>/?authSource=$external&authMechanism=PLAIN");

   .. tab::
      :tabid: MongoCredential

      To specify the LDAP (PLAIN) authentication mechanism using the
      ``MongoCredential`` class, use the ``createPlainCredential()``
      method. Your code to instantiate a ``MongoClient`` should resemble the
      following:

      .. include:: /includes/fundamentals/code-snippets/auth-credentials-ldap.rst

