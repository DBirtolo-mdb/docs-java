===========================
Quick Start - Legacy Driver
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. admonition:: This guide is for the legacy Java driver only
   
   Use this guide if your application only if your application is not
   compatible with the newer Java driver API. Otherwise, we recommend that you
   use the :doc:`Quick Start Guide </quick-start>` instead.

.. include:: /includes/quick-start-overview.rst


Set up Your Project
-------------------

Install the Java Development Kit (JDK)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Make sure that your system has JDK 8 or later installed. For more information
on how to check your version of Java and install the JDK, see the
`Oracle Overview of JDK Installation documentation <https://www.oracle.com/java/technologies/javase-downloads.html>`_.

Create the Project
~~~~~~~~~~~~~~~~~~~

This guide shows you how add the MongoDB Java driver dependencies using
Maven or Gradle. We recommend that you use an integrated development
environment (IDE) such as Intellij IDEA, Eclipse IDE, or NetBeans Java IDE to
make it more convenient to configure Maven or Gradle to build and run your
project.

If you are not using an IDE, see
`Building Maven <https://maven.apache.org/guides/development/guide-building-maven.html>`_
or
`Creating New Gradle Builds <https://guides.gradle.org/creating-new-gradle-builds/>`_
for more information on how to set up your project.

Add MongoDB as a Dependency
~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you are using Maven, add the following to your ``pom.xml`` dependencies
list:

.. code-block:: xml

   <dependencies>
       <dependency>
           <groupId>org.mongodb</groupId>
           <artifactId>mongodb-driver-legacy</artifactId>
           <version>4.0.1</version>
       </dependency>
   </dependencies>

If you are using Gradle, add the following to your ``build.gradle``
dependencies list:

.. code-block:: groovy

   dependencies {
     compile 'org.mongodb:mongodb-driver-legacy:4.0.1'
   }


Create a MongoDB Cluster
------------------------

Set up a Free Tier Cluster in Atlas
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After setting up your Java project dependencies, create a MongoDB instance
where you can store and manage your data. Complete the
:atlas:`Get Started with Atlas <getting-started>` guide to set up a new
Atlas account, free tier cluster (MongoDB instance), load datasets, and
interact with the data.

After completing the steps in the Atlas guide, you should have a new MongoDB
cluster deployed in Atlas, a new database user, and sample datasets loaded
into your cluster.

Connect to your Cluster
-----------------------

In this step, we create and run an application that uses the Java MongoDB
driver to connect to your instance of MongoDB and run a query on the sample
data.

We pass instructions to the driver on where and how to connect to your
MongoDB instance in a string called the *connection string*. This string
includes information on the hostname or IP address and port of your
instance, authentication mechanism, user credentials when applicable, and
other connection options.

To retrieve your connection string for the instance and user you created in
the previous step, log into your Atlas account and navigate to the
**Clusters** section and click the **Connect** button for the cluster that you
want to connect to as shown below.

.. figure:: /includes/figures/atlas_connection_select_cluster.png

Proceed to the **Connect Your Application** step and select the Java driver.
Then, select the "Connection String Only" tab and click the **Copy**
button to copy the *connection string* to your clipboard as shown below.

.. figure:: /includes/figures/atlas_connection_copy_string.png

Save your Atlas connection string in a safe location that you can access
for the next step.

Next, create a file to contain your application called ``QuickStart.java``
in the base package directory of your project.

Add the following imports for this example.

.. code-block:: java

   import org.bson.Document;

   import com.mongodb.MongoClient;
   import com.mongodb.MongoClientURI;
   import com.mongodb.client.MongoCollection;
   import com.mongodb.client.MongoDatabase;

Next, add the following method, replacing the value of the ``uri`` variable
with your MongoDB Atlas connection string. Make sure to replace the
"<password>" section of the connection string with the password you created for
your user that has **atlasAdmin** permissions:

.. code-block:: java
   public static void main( String[] args ) {

       String uri = "mongodb+srv://<user>:<password>@<cluster-url>?retryWrites=true&w=majority";

       MongoClientURI connectionString = new MongoClientURI(uri);
       MongoClient mongoClient = new MongoClient(connectionString);


       MongoDatabase database = mongoClient.getDatabase("sample_mflix");
       MongoCollection<Document> collection = database.getCollection("movies");

       Document doc = collection.find(eq("title", "Back to the Future")).first();
       System.out.println(doc.toJson());

       mongoClient.close();
    }

When you run the QuickStart class we created, it should output the details of
the movie from the sample dataset which resembles the following:

.. code-block:: json

   {
     _id: ...,
     plot: 'A young man is accidentally sent 30 years into the past...',
     genres: [ 'Adventure', 'Comedy', 'Sci-Fi' ],
     ...
     title: 'Back to the Future',
     ...
   }

If you receive no output or an error, check whether you included the proper
connection string in your Java class, and whether you loaded the sample dataset
in your MongoDB Atlas cluster.

After completing this step, you should have a working application that uses
the Java driver to connect to your MongoDB instance, run a query on the
sample data, and print out the result.


Next steps
----------

Learn how to read and modify data using the Java driver in our Fundamentals
CRUD guide or how to perform common operations from our Usage Examples.
