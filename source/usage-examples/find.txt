=======================
Find Multiple Documents
=======================

.. default-domain:: mongodb

You can query for multiple documents in a collection by calling the ``find()``
method on a ``MongoCollection`` object. Pass a query(TODO: link to filter builder) filter to the
``find()`` method to query for and return documents that match the filter in
the collection. If you do not include a filter, MongoDB returns all the
documents in the collection.

For more information on querying MongoDB with the Java driver, see our
guide (TODO: link) to querying documents.

You can also chain methods to the ``find()`` method such as ``sort()``
(TODO: link) which organizes the matched documents in a specified order and
``projection()`` (TODO: link) which configures the included fields in the
return document.


The ``find()`` method returns an object that implements Iterable, an interface
that allows you to traverse and retrieve a group of results. You can call
methods on the Iterable such as ``hasNext()`` to check whether additional
results exist, or ``next()`` to return the next result and advance the
iterable to point to the next result. If no documents match the query,
calling ``hasNext()`` returns ``false`` and calling ``next()`` throws an
exception. For a complete list of method signatures and return values for
``find()``, see the
:java-sync-api:`MongoCollection API documentation <com/mongodb/client/MongoCollection.html#find()>`.

If you call ``next()`` on the iterator either after it has returned the final
result or when no results exist, it throws an exception of type
``java.util.NoSuchElementException``. Always use ``hasNext()`` to check that
additional results exist before every time you call ``next()``.


Example
-------

The following snippet finds and prints all documents that match a query on
the ``movies`` collection. It uses the following objects and methods:

- A **query filter** that is passed in the ``find()`` method. The `lt()``
  filter matches only movies with a runtime of less than 15 minutes.

- A **sort** that organizes returned documents in descending order by
  title ("Z" before "A").

- A **projection** that includes the objects in the ``title`` and ``imdb``
  fields and excludes the ``_id`` field using the helper method
  ``excludeId()``.

.. include:: /includes/connect-guide-note.rst

.. literalinclude:: /includes/usage-examples/code-snippets/Find.java
   :language: java

If you are using the **legacy API**, see (TODO: link) to determine what
changes you need to make to this code example.
